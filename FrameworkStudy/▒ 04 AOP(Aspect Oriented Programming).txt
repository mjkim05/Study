■■■ AOP(Aspect Oriented Programming) ■■■

※ 공통의 관심 사항을 적용해서 발생하는 의존 관계의 복잡성과
   코드 중복을 해소해주는 프로그래밍 기법

○ AOP 개념

   주 업무를 실행할 때 보조적인 업무(주 업무 실행 시간 체크, 로그 기록 등)가 진행되어야 한다.
   만약, 주 업무가 여러개이고, 동일한 보조 업무의 수행이 진행되어야 한다면
   보조 업무 부분은 중복된 코드가 될 수 밖에 없다.
   이런 중복 요소를 제거하고 보조 업무를 보다 독립적인 방법으로 실행 할 수 있도록
   구성하는 것을 AOP 기법이라고 한다. 
   
○ AOP 관련 주요 용어
   
   - 보조 업무 (cross-cutting concern)
     주 업무 실행 시 발생하는 보조적인 업무
     주 업무와 분리 및 결합이 쉽게 이루어질 수 있도록 만들어야 한다.
   
   - 주 업무 (core concern)
     핵심적인 기능을 수행하는 부분.
     사용자의 요청에 대한 기본적인 수행 및 결과 반환을 해야한다.

   - Advice
     언제 어떤 공통 관심 기능(보조 업무, cross-cutting concern)을 적용할지 결정하는 방법.
     Before Advice, After Advice, Around Advice 등이 있다.
     ·Before Advice
       보조 업무가 주 업무 실행 전에 수행되는 경우
     ·After Advice
       보조 업무가 주 업무 실행 후에 수행되는 경우
     ·Around Advice 
       보조 업무가 주 업무 실행 전과 후에 수행되는 경우 

   - proxy
     주 업무를 실행하는 객체와 동일한 모양을 가진 가짜 객체
     사용자가 직접 주 업무를 실행하는 객체를 찾아가는 것이 아니라,
     proxy를 찾아가도록 지정하게 된다.
     proxy 내부에서 보조 업무를 실행한 후, 주 업무를 호출하도록 하면
     외부에서 볼 때 주 업무를 실행하는 것과 같은 결과가 나오도록 할수 있다.

   - joinpoint 
     proxy 내부에서 주 업무를 호출하는 경우에 특정 지점에만 호출되도록 할 수 잇다.

   - weaving 
     advice 를 주 업무에 적용하는 과정을 부르는 명칭.
    
   - aspect
     여러 주 업무 객체에 공통적으로 적용되는 공통 관심 사항(보조업무)를
     aspect라고 한다.

○ AOP 진행 순서 
    
   사용자           프록시            보조업무          주업무
   (client)         (proxy)           (cross-cut..)     (core concern)
   
   ○--------------------------------------------------->○

   ●------①------>●

		    ●------②------>●

                    ●----------------③---------------->●

		    ●<----------------④----------------●

		    ●------⑤------>●

   ○<---------------------------------------------------○
		   
   ●<------⑥------●















